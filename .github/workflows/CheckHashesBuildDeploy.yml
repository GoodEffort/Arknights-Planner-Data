name: Check Hashes, Build and Deploy
run-name: CheckBuildDeploy/${{ github.run_number }}
on:
    schedule:
        - cron: '9 * * * *'
    push:
        branches:
            - main
    workflow_dispatch:

env:
    json-url: https://goodeffort.github.io/Arknights-Planner-Data/arknights-data.json
    accept-header: application/vnd.github.VERSION.sha
    api-url: https://api.github.com/repos/Kengxxiao/
    cn-repo: ArknightsGameData/commits/master
    yostar-repo: ArknightsGameData_YoStar/commits/main

jobs:
    get-hashes:
        runs-on: ubuntu-latest
        name: Get Hashes
        if: github.ref == 'refs/heads/main'
        outputs:
            yostar-repo-hash: ${{ steps.get-yostar-repo-hash.outputs.yostar-repo-hash }}
            cn-repo-hash: ${{ steps.get-cn-repo-hash.outputs.cn-repo-hash }}
            yostar-json-hash: ${{ steps.get-yostar-json-hash.outputs.yostar-json-hash }}
            cn-json-hash: ${{ steps.get-cn-json-hash.outputs.cn-json-hash }}
        steps:
            - name: Download arknights-data.json
              run: curl -o arknights-data.json ${{ env.json-url }}
            - name: Get Yostar hash
              id: get-yostar-json-hash
              run: echo "yostar-json-hash=$(jq -r '.commitHashes.yostar' arknights-data.json)" >> "$GITHUB_OUTPUT"
            - name: Get CN hash
              id: get-cn-json-hash
              run: echo "cn-json-hash=$(jq -r '.commitHashes.cn' arknights-data.json)" >> "$GITHUB_OUTPUT"
            - name: Get Yostar repo hash
              id: get-yostar-repo-hash
              run: echo "yostar-repo-hash=$(curl -s ${{ env.api-url }}${{ env.yostar-repo }} | jq -r '.sha')" >> "$GITHUB_OUTPUT"
            - name: Get CN repo hash
              id: get-cn-repo-hash
              run: echo "cn-repo-hash=$(curl -s ${{ env.api-url }}${{ env.cn-repo }} | jq -r '.sha')" >> "$GITHUB_OUTPUT"

    compare-hashes:
        runs-on: ubuntu-latest
        needs: get-hashes
        name: Compare Hashes
        env:
            yostar-repo-hash: ${{ needs.get-hashes.outputs.yostar-repo-hash }}
            yostar-json-hash: ${{ needs.get-hashes.outputs.yostar-json-hash }}
            cn-repo-hash: ${{ needs.get-hashes.outputs.cn-repo-hash }}
            cn-json-hash: ${{ needs.get-hashes.outputs.cn-json-hash }}
        outputs:
          continue: ${{ steps.compare-yostar-hashes.outputs.continue }}
        steps:
          - name: Stop if hashes match
            id: compare-yostar-hashes
            run: |
              if [ ${{ env.yostar-json-hash }} == ${{ env.yostar-repo-hash }} ] && [ ${{ env.cn-json-hash }} == ${{ env.cn-repo-hash }} ]; then
                  echo "hashes match, do not continue"
                  echo "continue=false" >> "$GITHUB_OUTPUT"
              else
                  echo "hashes do not match, continue"
                  echo "continue=true" >> "$GITHUB_OUTPUT"
              fi

    build:
      needs: compare-hashes
      if: ${{ needs.compare-hashes.outputs.continue == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'push' }}
      runs-on: ubuntu-latest
      strategy:
        matrix:
          node-version: [21.x]
      steps:
        - name: Checkout
          uses: actions/checkout@v3
        - name: Use Node.js ${{ matrix.node-version }}
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.node-version }}
        - name: Install dependencies
          run: npm ci
        - name: Build Scripts
          run: npm run build
        - name: Rebuild data
          run: npm run start
  
        - name: Upload build files
          uses: actions/upload-artifact@v3
          with:
            name: production-files
            path: ./production-files
            
    deploy:
      name: Deploy
      needs: build
      runs-on: ubuntu-latest
      if: github.ref == 'refs/heads/main'
  
      steps:
        - name: Download artifact
          uses: actions/download-artifact@v3
          with:
            name: production-files
            path: ./jsondata
  
        - name: Deploy to GitHub Pages
          uses: peaceiris/actions-gh-pages@v3
          id: deployment
          with:
            github_token: ${{ secrets.GITHUB_TOKEN }}
            publish_dir: ./production-files 


            
            
